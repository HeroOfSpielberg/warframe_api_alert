import requests
import schedule
import time
from discord_webhook import DiscordWebhook, DiscordEmbed  # Ensure you have this library installed

# Configuration
WARFRAME_API_URL = "https://api.warframestat.us/pc/invasions"  # Change 'pc' if needed
SEARCH_ITEM = "mutagen"  # Item to search for (case-insensitive)
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1339722452904968245/zefgzYUHAy_kCa4X6rycmRlD2brwD9uYhVUHXdpnB-u-wPKOF12sMC7_TFXXI-HpPW36"  # Replace with your Discord webhook URL

def check_invasions():
    global found # allow for this parameter to be changed
    found = False
    try:
        response = requests.get(WARFRAME_API_URL)
        response.raise_for_status()  # Raises HTTPError for bad responses
        invasions = response.json()

        for invasion in invasions:
            # Function to recursively search for the item in the reward structure
            def search_reward(reward):
                if isinstance(reward, dict):
                    if 'countedItems' in reward:
                        for item in reward['countedItems']:
                            if 'type' in item and SEARCH_ITEM.lower() in item['type'].lower():
                                return item['type'], invasion['node']  # Return full item name and node
                    for key, value in reward.items():
                        if isinstance(value, str) and SEARCH_ITEM.lower() in value.lower():
                            return value, invasion['node']  # Return full value and node
                        if isinstance(value, list):
                            for i in value:
                                result = search_reward(i)
                                if result:
                                    return result  # Return the found value
                    return None
                elif isinstance(reward, list):
                    for item in reward:
                        result = search_reward(item)
                        if result:
                            return result
                    return None
                return None

            # Check defender rewards
            if 'defender' in invasion and 'reward' in invasion['defender']:
                reward_info = search_reward(invasion['defender']['reward'])
                if reward_info:
                    reward_name, node = reward_info
                    send_discord_notification(reward_name, node, "Defender")
                    found = True

            # Check attacker rewards
            if 'attacker' in invasion and 'reward' in invasion['attacker']:
                reward_info = search_reward(invasion['attacker']['reward'])
                if reward_info:
                    reward_name, node = reward_info
                    send_discord_notification(reward_name, node, "Attacker")
                    found = True


        if not found:
            print(f"No invasions with '{SEARCH_ITEM}' found.")
            #send_discord_notification_no_results(SEARCH_ITEM) # uncomment if you want a negative notification

    except requests.RequestException as e:
        print(f"Error during API request: {e}")

    print("Invasion check completed.")


def send_discord_notification(reward_name, node, faction):
    webhook = DiscordWebhook(url=DISCORD_WEBHOOK_URL) #, username="Warframe Alerts")

    # create embed object for webhook
    embed = DiscordEmbed(title=f"Invasion Alert!", color=242424)

    # set author
    #embed.set_author(name='Warframe Alert System')

    # set thumbnail
    embed.set_thumbnail(url='https://www.warframe.com/sites/default/files/styles/header_image/public/WF-Logo-White.png?itok=Z74U306G')

    # set footer
    #embed.set_footer(text='Alert generated by warframe bot')

    # set timestamp (optional)
    #embed.set_timestamp()

    # add fields to embed
    embed.add_embed_field(name='Reward', value=reward_name)
    embed.add_embed_field(name='Node', value=node)
    embed.add_embed_field(name='Faction', value=faction)

    # add embed object to webhook
    webhook.add_embed(embed)

    try:
        response = webhook.execute() # send message
        print(f"Discord notification sent successfully.  Status code: {response.status_code}")
        if response.status_code != 200: # warn user if message failed to send.
            print(f"Error sending to discord, error code {response.status_code}")


    except Exception as e:
        print(f"Failed to send Discord notification: {e}")

def send_discord_notification_no_results(SEARCH_ITEM):
    webhook = DiscordWebhook(url=DISCORD_WEBHOOK_URL) #, username="Warframe Alerts")

    # create embed object for webhook
    embed = DiscordEmbed(title=f"Negative Search!", description=f"No {SEARCH_ITEM} invasions found", color=242424)


    # add embed object to webhook
    webhook.add_embed(embed)

    try:
        response = webhook.execute() # send message
        print(f"Discord notification sent successfully.  Status code: {response.status_code}")
        if response.status_code != 200: # warn user if message failed to send.
            print(f"Error sending to discord, error code {response.status_code}")


    except Exception as e:
        print(f"Failed to send Discord notification: {e}")

# Run the check immediately when the script starts
check_invasions()

# Schedule the check to run every hour
schedule.every().hour.do(check_invasions)

# Keep the script running
while True:
    schedule.run_pending()
    time.sleep(1)
